PythonForBeginners.com
Learn By Example
Last Updated: May 20, 2020 
First things first, let’s introduce you to Requests.
Requests is an Apache2 Licensed HTTP library, written in Python. It is designed to be used by humans to interact with the language. This means you don’t have to manually add query strings to URLs, or form-encode your POST data. Don’t worry if that made no sense to you. It will in due time.
What can Requests do?
Requests will allow you to send HTTP/1.1 requests using Python. With it, you can add content like headers, form data, multipart files, and parameters via simple Python libraries. It also allows you to access the response data of Python in the same way.
In programming, a library is a collection or pre-configured selection of routines, functions, and operations that a program can use. These elements are often referred to as modules, and stored in object format.
Libraries are important, because you load a module and take advantage of everything it offers without explicitly linking to every program that relies on them. They are truly standalone, so you can build your own programs with them and yet they remain separate from other programs.
Think of modules as a sort of code template.
To reiterate, Requests is a Python library.
The good news is that there are a few ways to install the Requests library. To see the full list of options at your disposal, you can view the official install documentation for Requests here.
You can make use of pip, easy_install, or tarball.
If you’d rather work with source code, you can get that on GitHub, as well.
For the purpose of this guide, we are going to use pip to install the library.
In your Python interpreter, type the following:
To work with the Requests library in Python, you must import the appropriate module. You can do this simply by adding the following code at the beginning of your script:
Of course, to do any of this – installing the library included – you need to download the necessary package first and have it accessible to the interpreter.
For Python training, our top recommendation is DataCamp.
When you ping a website or portal for information this is called making a request. That is exactly what the Requests library has been designed to do.
To get a webpage you would do something like the following:
Before you can do anything with a website or URL in Python, it’s a good idea to check the current status code of said portal. You can do this with the dictionary look-up object.
After a web server returns a response, you can collect the content you need. This is also done using the get requests function.
By utilizing a Python dictionary, you can access and view a server’s response headers. Thanks to how Requests works, you can access the headers using any capitalization you’d like.
If you perform this function but a header doesn’t exist in the response, the value will default to None.
Requests will automatically decade any content pulled from a server. But most Unicode character sets are seamlessly decoded anyway.
When you make a request to a server, the Requests library make an educated guess about the encoding for the response, and it does this based on the HTTP headers. The encoding that is guessed will be used when you access the r.text file.
Through this file, you can discern what encoding the Requests library is using, and change it if need be. This is possible thanks to the r.encoding property you’ll find in the file.
If and when you change the encoding value, Requests will use the new type so long as you call r.text in your code.
If you want to add custom HTTP headers to a request, you must pass them through a dictionary to the headers parameter.
Requests will automatically perform a location redirection when you use the GET and OPTIONS verbs in Python.
GitHub will redirect all HTTP requests to HTTPS automatically. This keeps things secure and encrypted.
You can use the history method of the response object to track redirection status.
You can also handle post requests using the Requests library.
But you can also rely on other HTTP requests too, like PUT, DELETE, HEAD, and OPTIONS.
You can use these methods to accomplish a great many things. For instance, using a Python script to create a GitHub repo.
There are a number of exceptions and error codes you need to be familiar with when using the Requests library in Python.
Any exceptions that Requests raises will be inherited from the requests.exceptions.RequestException object.
You can read more about the Requests library at the links below.
http://docs.python-requests.org/en/latest/api/
http://pypi.python.org/pypi/requests
http://docs.python-requests.org/en/latest/user/quickstart/
http://isbullsh.it/2012/06/Rest-api-in-python/#requests
For Python training, our top recommendation is DataCamp.
Filed Under: Requests
Date Originally Published: February 11, 2013
Copyright © 2012–2020 · PythonForBeginners.com
